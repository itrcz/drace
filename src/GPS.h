#ifndef CLASS_GPS
#define CLASS_GPS

#include "Arduino.h"
#include <stdint.h>



#define UBX_UART Serial5

#define UBX_POS_CLASS 2
#define UBX_POS_ID    3

#define UBX_CLASS_NAV  0x01
#define UBX_ID_SOL     0x06
#define UBX_ID_VELNED  0x12

#define UBX_CLASS_CFG   0x06
#define UBX_ID_PRT      0x00
#define UBX_ID_MSG      0x01
#define UBX_ID_RATE     0x08
#define UBX_ID_NAV5     0x24
#define UBX_ID_PMS      0x86

/*
 STX
 */
const uint8_t UBX_HEADER[] = { 0xB5, 0x62 };


const uint8_t UBX_RATE_1000MS[]        = { 0xE8, 0x03, 0x01, 0x00, 0x01, 0x00 }; // 1Hz
const uint8_t UBX_RATE_500MS[]         = { 0xF4, 0x01, 0x01, 0x00, 0x01, 0x00 }; // 2Hz
const uint8_t UBX_RATE_200MS[]         = { 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00 }; // 5Hz
const uint8_t UBX_RATE_100MS[]         = { 0x64, 0x00, 0x01, 0x00, 0x01, 0x00 }; // 10Hz


// NMEA Messages
const uint8_t GGA_CFG[] = { 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t GLL_CFG[] = { 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t GSA_CFG[] = { 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t GSV_CFG[] = { 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t RMC_CFG[] = { 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t VTG_CFG[] = { 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t GRS_CFG[] = { 0xF0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t GST_CFG[] = { 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t ZDA_CFG[] = { 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t GBS_CFG[] = { 0xF0, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

// UBX Messages
const uint8_t UBX_SOL_CFG[]     = { 0x01, 0x06, 0x01 };
const uint8_t UBX_VELNED_CFG[]  = { 0x01, 0x12, 0x01 };

/*
 CFG-PMS
 */
const uint8_t UBX_PMS_SETTINGS[]        = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Full Power
/* 
 CFG-PRT
 Speed 115200 for Uart
 */
const uint8_t UBX_PORT_SETTINGS[] = { 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 };

/*
 CFG-NAV5 (0x06 0x24)
 See the Navigation Configuration Settings Description for a detailed description of how
 these settings affect receiver operation
 
 Navigation Engine Settings
 
 0-1: MASK
 2: Dynamic Model
 - 0 Portable
 - 2 Stationary
 - 3 Pedestrian
 - 4 Automotive
 - 5 Sea
 - 6 Airborne with <1g Acceleration
 - 7 Airborne with <2g Acceleration
 - 8 Airborne with <4g Acceleration
 3: Fix Mode:
 - 1: 2D only
 - 2: 3D only
 - 3: Auto 2D/3D
 
 */
const uint8_t UBX_ENGINE_SETTINGS[] = { 0xFF, 0xFF, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


class GPS
{
public:
    uint8_t     fix;
    uint8_t     sat;
    //uint8_t     accu;
    uint32_t    speed;
    
public:

    GPS( void ) ;
    //Инициализация
    void Init( void );
    //Обновление данных
    void Update( void ) ;
    //Получения скорости в Км/ч
    uint16_t getSpeed ( void );

private:
    bool configurated = false;
    //Декодирование пакета
    void _decodePacket( void );
    //Передача в uart
    void write(uint8_t Class, uint8_t Id, const uint8_t *Data, uint8_t Length);
    
    void CK_recalc(uint8_t *CK, uint8_t b) {
        CK[0] += b;
        CK[1] += CK[0];
    };
    
    uint8_t _rxBuffer[128];
    uint8_t _rxPos;
    uint8_t _rxLength;
    uint8_t _rxCK[2];
};
#endif
